Sub Directions(host As Variant, excelrow As Integer)

Dim special As Integer
special = 0
If Sheet1.Cells(excelrow, 16).Value > 0 Then
    Call ViewAWB.VerifyOP(host)
    special = 1
    End If
If Sheet1.Cells(excelrow, 14).Value > 0 Then
    Call ViewAWB.VerifyALPK(host)
    special = 1
    End If
If special = 0 Then Call ViewAWB.VerifyAWB(host)

Call ViewAWB.VAWB_Origin(host)
'assembles data in viewawb screen so we can take it apart for sorting later
Call ViewAWB.Assembly(host)

If BORG.Can_flight.Value = True Then Call ViewAWB.CanFlightBulk(host)

Dim row As Integer
row = 17

Dim raw As String
raw = ""

Do Until Sheet3.Cells(row, 2).Value = ""
    raw = Sheet3.Cells(row, 2).Text
    UNpos = VAWB_UN_RQ(raw, excelrow, row, special)
    clspos = ViewAWB.VAWB_Class(raw, excelrow, row, special)
    'up to here
    Call ViewAWB.VAWB_PSN(raw, excelrow, row, UNpos, clspos)
    PGpos ViewAWB.VAWB_PG(raw, excelrow, row, clspos)
    WTpos = ViewAWB.VAWB_WT(raw, excelrow, row, PGpos)
    Call ViewAWB.NumPcs(raw, excelrow, row, special, WTpos)
    If BORG.Can_flight.Value = True Then Call ViewAWB.canflight(raw, excelrow, row)
    row = row + 1
Loop

End Sub

Function VAWB_UN_RQ(raw As String, excelrow As Integer, row As Integer, special As Integer) As Integer
On Error GoTo errOut:
Start = 1
    If Left(raw, 2) = "RQ" Then
        Start = Start + 4
    End If
    UNnum = Mid(raw, Start, 6)
    If special = 1 Then Sheet1.Cells(excelrow + (row - 17), 4).Value = UNnum
    Else: Sheet1.Cells(excelrow, 4).Value = UNnum
    End If
    
    VAWB_UN_RQ = Start + 6
    
Exit Function
errOut:
VAWB_UN_RQ = Start + 6
End Function

Function VAWB_Class(raw As String, excelrow As Integer, row As Integer, special As Integer) As Integer
Start = 1
    If Left(Sheet3.Cells(row, 2).Value, 2) = "RQ" Then
        Start = Start + 4
    End If
    
    RADchk = InStr(1, raw, "EXCEPTED PACKAGE")
    If RADchk >= 1 Then
        Sheet3.Cells(16, 5).Value = "0"
        classinfo = Array("0", RADchk)
        GoTo hazclassAssign
    End If
    
    classinfo = Classfind(raw)
    hazclass = classinfo(0)
     
hazclassAssign:
    If special = 1 Then Sheet1.Cells(excelrow + (row - 17), 7).Value = hazclass
    Else: Sheet1.Cells(excelrow, 7).Value = hazclass
    End If
        
    VAWB_Class = classinfo(1) 'contains class position
End Function 'end class sub

Function Classfind(raw As String)
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'''Uses strings within excel to find class and subrisk'''''''''''''''''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
On Error GoTo errOut:
Subend = 1

SubClass = Array(", 1.4B, ", ", 1.4C, ", ", 1.4D, ", ", 1.4E, ", ", 1.4G, ", _
    ", 1.4S, ", ", 2.1, ", ", 2.2, ", ", 3, ", ", 4.1, ", ", 4.2, ", ", 4.3, ", _
    ", 5.1, ", ", 5.2, ", ", 6.1, ", ", 6.2, ", ", 7, ", ", 8, ", ", 9, ", ", 1.4B(", _
    ", 1.4C(", ", 1.4D(", ", 1.4E(", ", 1.4G(", ", 1.4S(", ", 2.1(", ", 2.2(", _
    ", 3(", ", 4.1(", ", 4.2(", ", 4.3(", ", 5.1(", ", 5.2(", ", 6.1(", ", 6.2(", _
    ", 7(", ", 8(", ", 9(")

x = 0
Do Until classposition > 1 Or x > 37
    classposition = InStr(1, raw, SubClass(x))
    If classposition > 1 Then
        classposition = classposition + 1
            If x > 18 Then
            Do Until endcheck = ")"
                endcheck = Mid(raw, classposition + Subend, 1)
                If endcheck = ")" Then Exit Do
                Subend = Subend + 1
            Loop
            Else
                Classes = Array("1.4B", "1.4C", "1.4D", "1.4E", "1.4G", "1.4S", "2.1", "2.2", "3", _
                    "4.1", "4.2", "4.3", "5.1", "5.2", "6.1", "6.2", "7", "8", "9")
                hazclass = Classes(x)
                Exit Do
            End If
        hazclass = Mid(raw, classposition + 1, classposition - (classposition - Subend))
    End If
x = x + 1
Loop

Classfind = Array(hazclass, classposition)
Exit Function
'Sheet3.Cells(16, 6).Value = classposition - 1
'Sheet3.Cells(16, 5).Value = hazclass
errOut:
Classfind = Array("0", 0)
End Function

